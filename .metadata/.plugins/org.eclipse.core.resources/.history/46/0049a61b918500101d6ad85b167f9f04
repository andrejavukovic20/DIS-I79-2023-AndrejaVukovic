package menu.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import menu.Category;
import menu.model.Menu;
import menu.repository.MenuRepository;

public class MenuServiceTest {
	
	 	private MenuRepository repository;
	    private MenuService service;

	    @BeforeEach
	    void setUp() {
	        repository = mock(MenuRepository.class);
	        service = new MenuService(repository);
	    }

	    private Menu sample(Long id) {
	        return new Menu(id, "Espresso", "Strong coffee", 2.5, Category.DRINK, true, 5);
	    }

	    // ---- getAllMenuItem
	    @Test
	    void testGetAllMenuItem() {
	        when(repository.findAll()).thenReturn(List.of(new Menu(), new Menu()));
	        var result = service.getAllMenuItem();
	        assertEquals(2, result.size());
	        verify(repository).findAll();
	    }

	    // ---- getMenuItemById
	    @Test
	    void testGetMenuItemByIdExists() {
	        when(repository.findById(1L)).thenReturn(Optional.of(sample(1L)));
	        var result = service.getMenuItemById(1L);
	        assertEquals(1L, result.getId());
	    }

	    @Test
	    void testGetMenuItemByIdNotExists() {
	        when(repository.findById(99L)).thenReturn(Optional.empty());
	        var ex = assertThrows(RuntimeException.class, () -> service.getMenuItemById(99L));
	        assertEquals("Item not found", ex.getMessage());
	    }

	    // ---- createMenuItem
	    @Test
	    void testCreateMenuItemOk() {
	        var toSave = sample(null);
	        when(repository.save(toSave)).thenReturn(
	            new Menu(10L, toSave.getName(), toSave.getDescription(), toSave.getPrice(),
	                     toSave.getCategory(), toSave.getAvailable(), toSave.getStock())
	        );
	        var saved = service.createMenuItem(toSave);
	        assertEquals(10L, saved.getId());
	    }

	    @Test
	    void testCreateMenuItemNullCategory() {
	        var toSave = sample(null);
	        toSave.setCategory(null);
	        var ex = assertThrows(IllegalArgumentException.class, () -> service.createMenuItem(toSave));
	        assertEquals("Category is required.", ex.getMessage());
	    }

	    // ---- updateMenuItem
	    @Test
	    void testUpdateMenuItemOk() {
	        when(repository.findById(5L)).thenReturn(Optional.of(sample(5L)));
	        when(repository.save(any(Menu.class))).thenAnswer(inv -> inv.getArgument(0));

	        var incoming = new Menu(null, "Latte", "Milky", 3.0, Category.DRINK, true, 7);
	        var updated = service.updateMenuItem(5L, incoming);

	        assertEquals("Latte", updated.getName());
	        assertEquals(3.0, updated.getPrice());
	        assertEquals(7, updated.getStock());
	        verify(repository).save(any(Menu.class));
	    }

	    // ---- deleteMenuItem
	    @Test
	    void testDeleteById() {
	        when(repository.existsById(1L)).thenReturn(true);
	        service.deleteMenuItem(1L);
	        verify(repository).deleteById(1L);
	    }

	    @Test
	    void testDeleteByIdNotExists() {
	        when(repository.existsById(9L)).thenReturn(false);
	        var ex = assertThrows(RuntimeException.class, () -> service.deleteMenuItem(9L));
	        assertEquals("Menu item with ID 9 does not exist.", ex.getMessage());
	    }

	    // ---- getByCatgory
	    @Test
	    void testGetByCategoryValid() {
	        when(repository.findByCategory(Category.FOOD)).thenReturn(
	            List.of(new Menu(1L, "Burger", "Beef", 7.5, Category.FOOD, true, 10))
	        );
	        var res = service.getByCatgory("FOOD");
	        assertEquals(1, res.size());
	        assertEquals(Category.FOOD, res.get(0).getCategory());
	    }

	    @Test
	    void testGetByCategoryInvalid() {
	        var ex = assertThrows(RuntimeException.class, () -> service.getByCatgory("UNKNOWN"));
	        assertTrue(ex.getMessage().contains("Invalid category"));
	    }

	    // ---- getAvailableItems / getAvailaleItemsByIds
	    @Test
	    void testGetAvailableItems() {
	        when(repository.findByAvailableTrue()).thenReturn(List.of(sample(1L)));
	        var res = service.getAvailableItems();
	        assertEquals(1, res.size());
	        verify(repository).findByAvailableTrue();
	    }

	    @Test
	    void testGetAvailableItemsByIds() {
	        when(repository.findByIdInAndAvailableTrue(List.of(1L, 2L)))
	            .thenReturn(List.of(sample(1L)));
	        var res = service.getAvailaleItemsByIds(List.of(1L, 2L));
	        assertEquals(1, res.size());
	        verify(repository).findByIdInAndAvailableTrue(List.of(1L, 2L));
	    }

	    // ---- reserveItems (ključna logika)
	    @Test
	    void testReserveItemsAllOk() {
	        var ids = List.of(1L, 2L);
	        var a = new Menu(1L, "A", "a", 1.0, Category.FOOD, true, 2);
	        var b = new Menu(2L, "B", "b", 2.0, Category.DRINK, true, 1);
	        when(repository.findAllForUpdate(ids)).thenReturn(List.of(a, b));

	        var missing = service.reserveItems(ids);

	        assertTrue(missing.isEmpty());
	        verify(repository).saveAll(argThat(list ->
	            list.size() == 2 && list.get(0).getStock() == 1 && list.get(1).getStock() == 0
	        ));
	    }

	    @Test
	    void testReserveItemsSomeMissing() {
	        var ids = List.of(1L, 2L, 3L);
	        var a = new Menu(1L, "A", "a", 1.0, Category.FOOD, true, 0);   // out of stock
	        var b = new Menu(2L, "B", "b", 2.0, Category.DRINK, false, 5); // not available
	        when(repository.findAllForUpdate(ids)).thenReturn(List.of(a, b)); // 3L ne postoji

	        var missing = service.reserveItems(ids);

	        assertTrue(missing.containsAll(List.of(1L, 2L, 3L)));
	        verify(repository, never()).saveAll(anyList());
	    }
	
}
