package order;

import java.util.List;

import org.springframework.stereotype.Service;

@Service
public class OrderService {
	private final OrderRepository orderRepository;
	private final MenuClient menuClient;
	
	public OrderService(OrderRepository orderRepository, MenuClient menuClient) {
		this.orderRepository = orderRepository;
		this.menuClient = menuClient;
	}
	
	public List<Order> getAllOrders() {
		return orderRepository.findAll();
	}
	
	public Order getOrderById(Long id) {
		return orderRepository.findById(id).orElseThrow(() -> new RuntimeException("Item not found"));
	}
	
	public Order createOrder(Order order) {
		List<MenuItemDto> availableItems = menuClient.getAvailableItems(order.getMenuItemIds());
		
		if (availableItems.size() != order.getMenuItemIds().size()) {
			throw new RuntimeException("Some menu items are not available or invalid.");
		}
		order.setStatus(OrderStatus.CREATED);
		order.setCreatedAt(java.time.LocalDateTime.now());
		return orderRepository.save(order);
	}
	
	public Order updateOrder(Long id, Order newOrder) {
		Order existing = getOrderById(id);
		existing.setMenuItemIds(newOrder.getMenuItemIds());
		return orderRepository.save(existing);
	}
	
	public void deleteOrder(Long id) {
		if (!orderRepository.existsById(id)) {
			throw new RuntimeException("Order with ID " + id + " not found");
		}
		
		orderRepository.deleteById(id);
	}
	
	 public Order updateOrderStatus(Long id, OrderStatus newStatus) {
	        Order order = getOrderById(id);
	        order.setStatus(newStatus);
	        return orderRepository.save(order);
	 }
}
