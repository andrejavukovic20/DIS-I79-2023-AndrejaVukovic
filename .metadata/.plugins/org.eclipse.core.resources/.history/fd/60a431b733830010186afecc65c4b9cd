package order;

import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import order.Order;
import order.OrderStatus;
import order.service.OrderService;

@RestController
@RequestMapping("/orders")
public class OrderController {

	private final OrderService orderService;
	
	public OrderController(OrderService orderService) {
		this.orderService = orderService;
	}
	
	@GetMapping 
	public ResponseEntity<List<Order>> getAll(){
	    return ResponseEntity.ok(orderService.getAllOrders());
	}

	@GetMapping("/{id}")
	public ResponseEntity<?> getById(@PathVariable Long id){
	    try {
	        return ResponseEntity.ok(orderService.getOrderById(id));
	    }
	    catch (RuntimeException ex){
	        return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                .body(ex.getMessage());
	    }
	}
	@PostMapping
	public ResponseEntity<?> create(@RequestBody Order order) {
	    try {
	        Order saved = orderService.createOrder(order);
	        return ResponseEntity.status(HttpStatus.CREATED)
	                .body("Order created with ID: " + saved.getId());
	    } catch (ResponseStatusException ex) {
	    	  return ResponseEntity
	                  .status(ex.getStatusCode())
	                  .body("Unfortunately, the selected items are out of stock.");
	    }
	}
	
	@PutMapping("/{id}") 
	public ResponseEntity<String> update(@PathVariable Long id, @RequestBody Order order) {
		Order updated = orderService.updateOrder(id, order);
		return ResponseEntity.ok("Order updated with ID: " + updated.getId());

	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<String> delete(@PathVariable Long id) {
	    try {
	    	orderService.deleteOrder(id);
	        return ResponseEntity.ok("Order deleted: ID " + id);
	    } catch (RuntimeException ex) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                .body(ex.getMessage());
	    }
	}
	
	  @PatchMapping("/{id}/status")
	  public ResponseEntity<String> updateStatus(@PathVariable Long id, @RequestParam String value) {
	        try {
	            OrderStatus newStatus = OrderStatus.valueOf(value.toUpperCase());
	            Order updated = orderService.updateOrderStatus(id, newStatus);
	            return ResponseEntity.ok("Order status updated to " + updated.getStatus());
	        } catch (IllegalArgumentException ex) {
	            return ResponseEntity.badRequest().body("Invalid status. Allowed values: CREATED, CANCELLED, IN_PROGRESS.");
	        }
	    }
}
