package delivery; 

import java.time.Instant;
import java.util.UUID;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Component;

import events.OrderEventDto;
import events.OrderQueues;

@Component
public class DeliveryListener {
	
	private final DeliveryNotifier notifier;
	
	public DeliveryListener(DeliveryNotifier notifier) {
		this.notifier = notifier;
	}
	
	@RabbitListener(queues = OrderQueues.ORDER_READY) 
	public void handleOrderReady(OrderEventDto ready) throws InterruptedException {
		 System.out.println("[DELIVERY] Received ready for orderId=" + ready.getOrderId()
								         + " chef=" + ready.getChef()
								         + " prep=" + ready.getPrepSeconds() + "s"
								         + " corrId=" + ready.getCorrelationId());
		 
		DeliveryStatus status;
		
		status = DeliveryStatus.ASSIGNED;
        System.out.println("[DELIVERY] Status=" + status + " orderId=" + ready.getOrderId());
		Thread.sleep(1000);
		
		status = DeliveryStatus.PICKED_UP;
        System.out.println("[DELIVERY] Status=" + status + " orderId=" + ready.getOrderId());
		Thread.sleep(2000);

		status = DeliveryStatus.IN_TRANSIT;
        System.out.println("[DELIVERY] Status=" + status + " orderId=" + ready.getOrderId());
		Thread.sleep(2000);

		status = DeliveryStatus.DELIVERED;
        System.out.println("[DELIVERY] Status=" + status + " orderId=" + ready.getOrderId());
					
        OrderEventDto delivered = new OrderEventDto();
        delivered.setEventId(UUID.randomUUID().toString());
        delivered.setOrderId(ready.getOrderId());
        delivered.setEventType("DELIVERED");
        delivered.setSource("DELIVERY");
        delivered.setCorrelationId(ready.getCorrelationId());
        delivered.setOccuredAt(Instant.now());
        
		notifier.sendDelivered(delivered);
	}
	
}
