package order;

import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatusCode;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;

import order.dto.MenuDto;

import org.springframework.core.ParameterizedTypeReference;

@Component
public class MenuClient {

	private final WebClient webClient;
	
	public MenuClient(WebClient.Builder builder) {
		this.webClient = builder.baseUrl("http://menu-service").build();
	}
	
	public List<MenuDto> getAvailableItems(List<Long> ids){
		return webClient.post()
				.uri("/menu/available/batch")
				.bodyValue(ids)
				.retrieve()
				.bodyToFlux(MenuDto.class)
				.collectList()
				.block();
	}
	
	public List<Long> reserveItems(List<Long> ids) {
	    Map<String, Object> body = webClient.post()
	        .uri("/menu/reserve")
	        .bodyValue(ids)
	        .retrieve()
	        .onStatus(HttpStatusCode::is4xxClientError, resp ->
	            resp.bodyToMono(new ParameterizedTypeReference<Map<String,Object>>() {})
	                .flatMap(m -> reactor.core.publisher.Mono.error(
	                        new org.springframework.web.server.ResponseStatusException(
	                                org.springframework.http.HttpStatus.CONFLICT,
	                                "OUT_OF_STOCK: " + m.get("missing"))
	                ))
	        )
	        .bodyToMono(new ParameterizedTypeReference<Map<String,Object>>() {})
	        .block(); 

	    return (List<Long>) body.getOrDefault("missing", List.of());
	}
}
