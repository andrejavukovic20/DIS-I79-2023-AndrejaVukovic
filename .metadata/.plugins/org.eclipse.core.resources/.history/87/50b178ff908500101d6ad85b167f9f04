package menu.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import menu.Category;
import menu.model.Menu;
import menu.service.MenuService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.hamcrest.Matchers.containsString;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest 
@ActiveProfiles("test")
public class MenuControllerTest {
	  @Autowired MockMvc mvc;
	  @Autowired ObjectMapper om;

	  @MockBean MenuService menuService;

	  private Menu sample(Long id) {
		  return new Menu(id, "Espresso", "Strong", 2.5, Category.DRINK, true, 5);
		  }

	  @Test
	  void getAll_returns200_andList() throws Exception {
		  when(menuService.getAllMenuItem()).thenReturn(List.of(sample(1L), sample(2L)));
		  
		  mvc.perform(get("/menu"))
	                .andExpect(status().isOk())
	                .andExpect(jsonPath("$[0].id").value(1L));
		  }

	  @Test
	  void getOne_found_200() throws Exception {
		  when(menuService.getMenuItemById(10L)).thenReturn(sample(10L));
		  
		  mvc.perform(get("/menu/10"))
	                .andExpect(status().isOk())
	                .andExpect(jsonPath("$.id").value(10L));
	        }
	  
	  @Test
	  void getOne_notFound_404_withMessage() throws Exception {
		  when(menuService.getMenuItemById(99L)).thenThrow(new RuntimeException("Item not found"));
		  
		  mvc.perform(get("/menu/99"))
	                .andExpect(status().isNotFound())
	                .andExpect(content().string(containsString("Item not found")));
		  }
	  
	  @Test
	  void create_valid_201_andMessage() throws Exception {
		  Menu toSave = sample(null);
	      Menu saved = sample(123L);
	      when(menuService.createMenuItem(any(Menu.class))).thenReturn(saved);

	      mvc.perform(post("/menu")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(om.writeValueAsString(toSave)))
	                .andExpect(status().isCreated())
	                .andExpect(content().string(containsString("Menu item added with ID: 123")));
	      }
	  
	  @Test
	  void create_invalidValidation_400_fromControllerAdvice() throws Exception {
		  Menu invalid = new Menu(null, "", "desc", 1.0, Category.DRINK, true, 1);

		  mvc.perform(post("/menu")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(om.writeValueAsString(invalid)))
	                .andExpect(status().isBadRequest())
	                .andExpect(jsonPath("$.name").value("Name is required"));
		  }
	  
	  @Test
	  void create_invalidEnumText_400_fromAdvice() throws Exception {
	        String badJson = """
	        {
	          "name": "X",
	          "description": "D",
	          "price": 1.0,
	          "category": "COFFEE",
	          "available": true,
	          "stock": 1
	        }
	        """;

	        mvc.perform(post("/menu")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(badJson))
	                .andExpect(status().isBadRequest())
	                .andExpect(content().string(containsString("Invalid category. Allowed values: FOOD, DRINK, DESERT")));
	        }
	  
	  @Test
	  void update_ok_200() throws Exception {
		  when(menuService.updateMenuItem(eq(7L), any(Menu.class))).thenReturn(sample(7L));

		  mvc.perform(put("/menu/7")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(om.writeValueAsString(sample(null))))
	                .andExpect(status().isOk())
	                .andExpect(content().string(containsString("Menu item updated with ID: 7")));
		  }
	  
	  @Test
	  void delete_ok_200() throws Exception {
		  mvc.perform(delete("/menu/5"))
	                .andExpect(status().isOk())
	                .andExpect(content().string(containsString("Menu item deleted: ID 5")));
		  }
	  
	  @Test
	  void getByCategory_noneFound_404() throws Exception {
		  when(menuService.getByCatgory("DRINK")).thenReturn(List.of());

		  mvc.perform(get("/menu/category/DRINK"))
	                .andExpect(status().isNotFound())
	                .andExpect(content().string(containsString("No items found for category: DRINK")));
		  }
	  
	  @Test
	  void getAvailableBatch_emptyBody_400() throws Exception {
		  mvc.perform(post("/menu/available/batch")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("[]"))
	                .andExpect(status().isBadRequest());
		  }
	  
	  @Test
	  void reserve_allOk_200_emptyMissing() throws Exception {
		  when(menuService.reserveItems(anyList())).thenReturn(List.of());
		  
		  mvc.perform(post("/menu/reserve")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("[1,2,3]"))
	                .andExpect(status().isOk())
	                .andExpect(jsonPath("$.missing.length()").value(0));
		  }
	  
	  @Test
	  void reserve_conflict_409_withMissingList() throws Exception {
		  when(menuService.reserveItems(anyList())).thenReturn(List.of(2L, 99L));
		  
		  mvc.perform(post("/menu/reserve")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("[1,2,99]"))
	                .andExpect(status().isConflict())
	                .andExpect(jsonPath("$.missing[0]").value(2))
	                .andExpect(jsonPath("$.missing[1]").value(99));
		  }
}

