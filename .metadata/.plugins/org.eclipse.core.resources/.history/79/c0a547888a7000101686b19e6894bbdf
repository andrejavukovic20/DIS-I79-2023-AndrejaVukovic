package menu;

import java.util.List;

import org.springframework.stereotype.Service;

@Service
public class MenuItemService {

	private final MenuItemRepository menuItemRepository;

	public MenuItemService(MenuItemRepository menuItemRepository) {
		this.menuItemRepository = menuItemRepository;
	}
	
	public List<MenuItem> getAllMenuItem(){
		return menuItemRepository.findAll();
	}
	
	public MenuItem getMenuItemById(Long id) {
		return menuItemRepository.findById(id).orElseThrow(() -> new RuntimeException("Item not found"));
	}
	
	public MenuItem createMenuItem(MenuItem item) {
	    if (item.getCategory() == null) {
	        throw new IllegalArgumentException("Category is required.");
	    }

	    try {
	        Category.valueOf(item.getCategory().name()); 
	    } catch (IllegalArgumentException ex) {
	        throw new IllegalArgumentException("Invalid category. Allowed values: FOOD, DRINK, DESERT.");
	    }

	    return menuItemRepository.save(item);
	}
	
	public MenuItem updateMenuItem(Long id, MenuItem item) {
	    MenuItem existing = getMenuItemById(id);

	    if (item.getCategory() == null) {
	        throw new IllegalArgumentException("Category is required.");
	    }

	    try {
	        Category.valueOf(item.getCategory().name());
	    } catch (IllegalArgumentException ex) {
	        throw new IllegalArgumentException("Invalid category. Allowed values: FOOD, DRINK, DESERT.");
	    }

	    existing.setName(item.getName());
	    existing.setDescription(item.getDescription());
	    existing.setPrice(item.getPrice());
	    existing.setCategory(item.getCategory());
	    existing.setAvailable(item.getAvailable());

	    return menuItemRepository.save(existing);
	}
	
	public void deleteMenuItem(Long id) {
		if (!menuItemRepository.existsById(id)) {
			throw new RuntimeException("Menu item with ID " + id + " does not exist.");
		}
	
		menuItemRepository.deleteById(id); 
	}
	
	public List<MenuItem> getByCatgory(String category){
		try {
			Category enumCategory = Category.valueOf(category.toUpperCase());
			return menuItemRepository.findByCategory(enumCategory);
		} catch (IllegalArgumentException ex) {
			throw new RuntimeException("Invalid category. Allowed values: FOOD, DRINK, DESERT");
		}
	}
	
	public List<MenuItem> getAvailableItems(){
		return menuItemRepository.findByAvailableTrue();
	}
	
	public List<MenuItem> getAvailaleItemsByIds(List<Long> ids){
		return menuItemRepository.findByIdAndAvailableTrue(ids);
	}
}
