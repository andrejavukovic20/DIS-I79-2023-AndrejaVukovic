package order;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Component;

import order.config.OrderQueues;

@Component
public class OrderEventPublisher {

	private final RabbitTemplate rabbitTemplate;

	public OrderEventPublisher(RabbitTemplate rabbitTemplate) {
		this.rabbitTemplate = rabbitTemplate;
	}
	
	private void publish(String queue, OrderEventDto dto) {
		if (dto.getEventId() == null) {
			dto.setEventId(UUID.randomUUID().toString());
		}
		if (dto.getOccuredAt() == null) {
			dto.setOccuredAt(Instant.now());
		}
		
		rabbitTemplate.convertAndSend(queue, dto);
		
		System.out.printf("[ORDER] sent event=%s orderId=%s corrId=%s queue=%s missing=%s%n",
				dto.getEventType(),
				dto.getOrderId(),
				dto.getCorrelationId(),
				queue,
				dto.getMissingItemIds());
	}
	
	public void publishOrderCreatedEvent(Long orderId, String correlationId) {
		OrderEventDto dto = new OrderEventDto();
		dto.setEventId(UUID.randomUUID().toString());
		dto.setOrderId(orderId);
		dto.setEventType("CREATED");
		dto.setSource("ORDER");
		dto.setCorrelationId(correlationId);
		publish(OrderQueues.ORDER_CREATED, dto);
	}
	
    public void publishOutOfStockEvent(Long orderId, List<Long> missingItemIds, String correlationId) {
        OrderEventDto dto = new OrderEventDto();
        dto.setOrderId(orderId);
        dto.setEventType("OUT_OF_STOCK");
        dto.setSource("ORDER");
        dto.setCorrelationId(correlationId);
        dto.setMissingItemIds(missingItemIds);
        publish(OrderQueues.ORDER_CREATED, dto); 
    }
	
	
}
