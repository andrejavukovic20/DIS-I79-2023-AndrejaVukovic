package menu.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import menu.Category;
import menu.model.Menu;
import menu.repository.MenuRepository;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class MenuIntegrationTest {
	 	@Autowired MockMvc mvc;
	 	@Autowired(required = false) ObjectMapper om;
	    @Autowired MenuRepository menuRepository;


	    @BeforeEach
	    void setup() {
	        if (om == null) {                          // fallback ako @Autowired nije uspio
	            om = new com.fasterxml.jackson.databind.ObjectMapper().findAndRegisterModules();
	        }
	    }

	    @Test
	    void crudFlow() throws Exception {
	        var item = new Menu(null, "Pie", "Apple", 3.2, Category.DESERT, true, 4);

	        // CREATE
	        mvc.perform(post("/menu")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(om.writeValueAsString(item)))
	                .andExpect(status().isCreated());

	        // Umjesto parsiranja iz poruke â€” uzmi ID iz baze
	        var saved = menuRepository.findAll().get(0);
	        long id = saved.getId();

	        // READ
	        mvc.perform(get("/menu/" + id))
	                .andExpect(status().isOk())
	                .andExpect(jsonPath("$.name").value("Pie"))
	                .andExpect(jsonPath("$.category").value("DESERT"));

	        // UPDATE
	        item.setName("Pie XXL");
	        mvc.perform(put("/menu/" + id)
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(om.writeValueAsString(item)))
	                .andExpect(status().isOk());

	        // DELETE
	        mvc.perform(delete("/menu/" + id))
	                .andExpect(status().isOk());
	    }
}
