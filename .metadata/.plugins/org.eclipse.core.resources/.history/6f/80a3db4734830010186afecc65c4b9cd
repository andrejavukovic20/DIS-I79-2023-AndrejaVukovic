package menu.service;

import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import jakarta.transaction.Transactional;
import menu.Category;
import menu.Menu;
import menu.MenuRepository;

@Service
public class MenuService {

	private final MenuRepository menuRepository;

	public MenuService(MenuRepository menuRepository) {
		this.menuRepository = menuRepository;
	}
	
	@Transactional
	 public List<Long> reserveItems(List<Long> ids){
        List<Menu> locked = menuRepository.findAllForUpdate(ids);
        Map<Long, Menu> byId = locked.stream()
                .collect(Collectors.toMap(Menu::getId, it -> it));

        List<Long> missing = new ArrayList<>();
        for (Long id : ids) {
            Menu it = byId.get(id);
            if (it == null || it.getStock() == null || it.getStock() <= 0 || Boolean.FALSE.equals(it.getAvailable())) {
                missing.add(id);
            }
        }
        if (!missing.isEmpty())
            return missing;

        for (Long id : ids) {
            Menu it = byId.get(id);
            it.setStock(it.getStock() - 1);
        }
        menuRepository.saveAll(locked);
        return List.of();
    }
	
	public List<Menu> getAllMenuItem(){
		return menuRepository.findAll();
	}
	
	public Menu getMenuItemById(Long id) {
		return menuRepository.findById(id).orElseThrow(() -> new RuntimeException("Item not found"));
	}
	
	public Menu createMenuItem(Menu item) {
	    if (item.getCategory() == null) {
	        throw new IllegalArgumentException("Category is required.");
	    }

	    try {
	        Category.valueOf(item.getCategory().name()); 
	    } catch (IllegalArgumentException ex) {
	        throw new IllegalArgumentException("Invalid category. Allowed values: FOOD, DRINK, DESERT.");
	    }

	    return menuRepository.save(item);
	}
	
	public Menu updateMenuItem(Long id, Menu item) {
	    Menu existing = getMenuItemById(id);

	    if (item.getCategory() == null) {
	        throw new IllegalArgumentException("Category is required.");
	    }

	    try {
	        Category.valueOf(item.getCategory().name());
	    } catch (IllegalArgumentException ex) {
	        throw new IllegalArgumentException("Invalid category. Allowed values: FOOD, DRINK, DESERT.");
	    }

	    existing.setName(item.getName());
	    existing.setDescription(item.getDescription());
	    existing.setPrice(item.getPrice());
	    existing.setCategory(item.getCategory());
	    existing.setAvailable(item.getAvailable());
	    existing.setStock(item.getStock());

	    return menuRepository.save(existing);
	}
	
	public void deleteMenuItem(Long id) {
		if (!menuRepository.existsById(id)) {
			throw new RuntimeException("Menu item with ID " + id + " does not exist.");
		}
	
		menuRepository.deleteById(id); 
	}
	
	public List<Menu> getByCatgory(String category){
		try {
			Category enumCategory = Category.valueOf(category.toUpperCase());
			return menuRepository.findByCategory(enumCategory);
		} catch (IllegalArgumentException ex) {
			throw new RuntimeException("Invalid category. Allowed values: FOOD, DRINK, DESERT");
		}
	}
	
	public List<Menu> getAvailableItems(){
		return menuRepository.findByAvailableTrue();
	}
	
	public List<Menu> getAvailaleItemsByIds(List<Long> ids){
		return menuRepository.findByIdInAndAvailableTrue(ids);
	}
}
